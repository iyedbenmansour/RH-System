{% extends 'baseBack.html.twig' %}

{% block title %}Event List{% endblock %}

{% block body %}
<style>
    /* Base styles */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
        font-family: 'Poppins', sans-serif;
    }

    /* Main container with scroll */
    .main-container {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        background: #f9f9f9;
    }

    /* Content wrapper with scroll */
    .content-wrapper {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    /* Button container */
    .button-container {
        display: flex;
        gap: 20px;
        margin: 20px 0;
        flex-wrap: wrap;
        justify-content: center;
        width: 100%;
        max-width: 1300px;
    }

    /* Keep your existing styles, but add max-height to table */
    .page-title {
        font-size: 2.7rem;
        color: #231a6f;
        margin-bottom: 30px;
        font-weight: 600;
        text-align: center;
        width: 100%;
    }

    table {
        width: 100%;
        max-width: 1300px;
        border-collapse: collapse;
        background-color: #fff;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
        margin-bottom: 20px;
    }

    /* Table container with scroll for small screens */
    .table-container {
        width: 100%;
        max-width: 1300px;
        overflow-x: auto;
        margin-bottom: 20px;
    }

    /* Rest of your existing styles... */
    th, td {
        padding: 16px;
        text-align: center;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: #231a6f;
        color: white;
        font-weight: 500;
    }

    tr:hover {
        background-color: #f1f1f1;
    }

    .btn {
        padding: 8px 12px;
        border-radius: 6px;
        color: white;
        text-decoration: none;
        font-size: 13px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        margin: 2px;
        transition: transform 0.2s ease;
    }

    .btn i {
        margin-right: 5px;
    }

    .show-btn {
        background: linear-gradient(45deg, #231a6f, #4b3c9e);
    }

    .edit-btn {
        background: linear-gradient(45deg, #aaa, #666);
    }

    .delete-btn {
        background: linear-gradient(45deg, #e74c3c, #c0392b);
    }

    .display-btn {
        background: linear-gradient(45deg, #26941e, #34b614);
    }

    .add-btn {
        background: linear-gradient(45deg, #1d1460, #4b3c9e);
    }

    .btn:hover {
        transform: scale(1.05);
    }

    .create-btn {
        background: linear-gradient(45deg, #000, #1a1a1a);
        color: #fff;
        padding: 12px 20px;
        border-radius: 6px;
        text-decoration: none;
        font-size: 16px;
        display: inline-block;
        transition: background-color 0.3s, transform 0.3s;
    }

    .create-btn:hover {
        background-color: #000;
        transform: scale(1.05);
    }

    /* Sorting dropdown styles */
    .sort-container {
        position: relative;
        display: inline-block;
    }

    .sort-btn {
        background: linear-gradient(45deg, #231a6f, #4b3c9e);
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .sort-btn:hover {
        background: linear-gradient(45deg, #4b3c9e, #231a6f);
    }

    .sort-dropdown {
        display: none;
        position: absolute;
        background-color: white;
        min-width: 220px;
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        border-radius: 6px;
        z-index: 100;
        top: 100%;
        left: 0;
        margin-top: 5px;
        overflow: hidden;
    }

    .sort-dropdown.show {
        display: block;
    }

    .sort-option {
        color: #333;
        padding: 12px 16px;
        text-decoration: none;
        display: flex;
        align-items: center;
        cursor: pointer;
        transition: all 0.2s;
    }

    .sort-option:hover {
        background-color: #f5f5f5;
    }

    .sort-option i {
        margin-right: 10px;
        width: 20px;
        text-align: center;
        color: #231a6f;
    }

    .sort-option.active {
        background-color: #f0f0ff;
        font-weight: 500;
    }

    @media (max-width: 992px) {
        table, thead, tbody, th, td, tr {
            display: block;
        }

        th {
            display: none;
        }

        td {
            position: relative;
            padding-left: 50%;
            text-align: left;
        }

        td::before {
            position: absolute;
            left: 10px;
            width: 45%;
            white-space: nowrap;
            font-weight: bold;
            color: #231a6f;
        }

        td:nth-of-type(1)::before { content: "Name"; }
        td:nth-of-type(2)::before { content: "Date"; }
        td:nth-of-type(3)::before { content: "Location"; }
        td:nth-of-type(4)::before { content: "Organiser"; }
        td:nth-of-type(5)::before { content: "Type"; }
        td:nth-of-type(6)::before { content: "Participants"; }
        td:nth-of-type(7)::before { content: "Price"; }
        td:nth-of-type(8)::before { content: "Actions"; }
    }

    @media (max-width: 600px) {
        .button-container {
            flex-direction: column;
            align-items: center;
            gap: 10px;
        }
    }
</style>

<div class="main-container">
    <div class="content-wrapper">
        <h1 class="page-title">Event List</h1>

        {% if events|length > 0 %}
        <div class="table-container">
            <table id="events-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Date</th>
                        <th>Location</th>
                        <th>Organiser</th>
                        <th>Type</th>
                        <th>Participants</th>
                        <th>Price (DT)</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {% for event in events %}
                        <tr>
                            <td>{{ event.name }}</td>
                            <td data-sort="{{ event.date ? event.date.timestamp : 0 }}">{{ event.date ? event.date|date('Y-m-d') : '' }}</td>
                            <td>{{ event.location }}</td>
                            <td>{{ event.organiser }}</td>
                            <td>{{ event.eventType }}</td>
                            <td data-sort="{{ event.nbParticipant }}">{{ event.nbParticipant }}</td>
                            <td data-sort="{{ event.ticketPrice }}">{{ event.ticketPrice }}</td>
                            <td>
                                <a href="{{ path('app_event_show_back', {'id': event.id}) }}" class="btn show-btn"><i class="fas fa-eye"></i> Show</a>
                                <a href="{{ path('app_event_edit_back', {'id': event.id}) }}" class="btn edit-btn"><i class="fas fa-edit"></i> Edit</a>
                                <form method="post" action="{{ path('app_event_delete_back', {'id': event.id}) }}" onsubmit="return confirm('Are you sure you want to delete this item?');" style="display:inline-block">
                                    <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ event.id) }}">
                                    <button class="btn delete-btn"><i class="fas fa-trash-alt"></i> Delete</button>
                                </form>
                                <a href="{% if event.hasFormation and event.formationId is not null %}{{ path('app_formation_show_back', {'id': event.formationId}) }}{% else %}#{% endif %}" 
                                class="btn display-btn" 
                                {% if not event.hasFormation or event.formationId is null %}style="pointer-events: none; opacity: 0.5;"{% endif %}>
                                 <i class="fas fa-chalkboard-teacher"></i> Display
                             </a>
                                <a href="{{ path('app_formation_new_back', {'eventId': event.id}) }}" 
                                   class="btn add-btn" 
                                   {% if event.hasFormation %}
                                       style="pointer-events: none; opacity: 0.5;" 
                                       title="This event already has a formation"
                                   {% endif %}>
                                    <i class="fas fa-plus-circle"></i> Add
                                </a>
                            </td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        {% else %}
            <p>No events found.</p>
        {% endif %}

        <div class="button-container">
            <div class="sort-container">
                <button id="sort-btn" class="sort-btn">
                    <i class="fas fa-sort"></i> Sort Events
                </button>
                <div id="sort-dropdown" class="sort-dropdown">
                    <div class="sort-option" data-sort="name-asc">
                        <i class="fas fa-sort-alpha-down"></i> Name (A-Z)
                    </div>
                    <div class="sort-option" data-sort="name-desc">
                        <i class="fas fa-sort-alpha-up"></i> Name (Z-A)
                    </div>
                    <div class="sort-option" data-sort="date-asc">
                        <i class="fas fa-calendar-day"></i> Date (Oldest)
                    </div>
                    <div class="sort-option" data-sort="date-desc">
                        <i class="fas fa-calendar-day"></i> Date (Newest)
                    </div>
                    <div class="sort-option" data-sort="location-asc">
                        <i class="fas fa-map-marker-alt"></i> Location (A-Z)
                    </div>
                    <div class="sort-option" data-sort="location-desc">
                        <i class="fas fa-map-marker-alt"></i> Location (Z-A)
                    </div>
                    <div class="sort-option" data-sort="price-asc">
                        <i class="fas fa-money-bill-wave"></i> Price (Low to High)
                    </div>
                    <div class="sort-option" data-sort="price-desc">
                        <i class="fas fa-money-bill-wave"></i> Price (High to Low)
                    </div>
                    <div class="sort-option" data-sort="participants-asc">
                        <i class="fas fa-users"></i> Participants (Fewest)
                    </div>
                    <div class="sort-option" data-sort="participants-desc">
                        <i class="fas fa-users"></i> Participants (Most)
                    </div>
                    <div class="sort-option" data-sort="default">
                        <i class="fas fa-undo"></i> Default Order
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const sortBtn = document.getElementById('sort-btn');
    const sortDropdown = document.getElementById('sort-dropdown');
    const sortOptions = document.querySelectorAll('.sort-option');
    const eventsTable = document.getElementById('events-table');
    let originalOrder = [];

    // Store original order of rows
    if (eventsTable) {
        const rows = Array.from(eventsTable.querySelectorAll('tbody tr'));
        originalOrder = rows.map(row => row.cloneNode(true));
    }

    // Toggle dropdown visibility
    sortBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        sortDropdown.classList.toggle('show');
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
        if (!sortBtn.contains(e.target) && !sortDropdown.contains(e.target)) {
            sortDropdown.classList.remove('show');
        }
    });

    // Handle sort options
    sortOptions.forEach(option => {
        option.addEventListener('click', function() {
            const sortType = this.getAttribute('data-sort');
            sortTable(sortType);
            
            // Update active state
            sortOptions.forEach(opt => opt.classList.remove('active'));
            this.classList.add('active');
            
            // Update button text with the selected sort
            const icon = this.querySelector('i').cloneNode(true);
            const text = this.textContent.trim();
            sortBtn.innerHTML = '';
            sortBtn.appendChild(icon);
            sortBtn.appendChild(document.createTextNode(' ' + text.split('\n')[0]));
            
            // Close dropdown
            sortDropdown.classList.remove('show');
        });
    });

    function sortTable(sortType) {
        const tbody = eventsTable.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));

        switch(sortType) {
            case 'name-asc':
                rows.sort((a, b) => a.cells[0].textContent.trim().localeCompare(b.cells[0].textContent.trim()));
                break;
            case 'name-desc':
                rows.sort((a, b) => b.cells[0].textContent.trim().localeCompare(a.cells[0].textContent.trim()));
                break;
            case 'date-asc':
                rows.sort((a, b) => {
                    const aDate = parseInt(a.cells[1].getAttribute('data-sort'));
                    const bDate = parseInt(b.cells[1].getAttribute('data-sort'));
                    return aDate - bDate;
                });
                break;
            case 'date-desc':
                rows.sort((a, b) => {
                    const aDate = parseInt(a.cells[1].getAttribute('data-sort'));
                    const bDate = parseInt(b.cells[1].getAttribute('data-sort'));
                    return bDate - aDate;
                });
                break;
            case 'location-asc':
                rows.sort((a, b) => a.cells[2].textContent.trim().localeCompare(b.cells[2].textContent.trim()));
                break;
            case 'location-desc':
                rows.sort((a, b) => b.cells[2].textContent.trim().localeCompare(a.cells[2].textContent.trim()));
                break;
            case 'price-asc':
                rows.sort((a, b) => {
                    const aPrice = parseFloat(a.cells[6].getAttribute('data-sort'));
                    const bPrice = parseFloat(b.cells[6].getAttribute('data-sort'));
                    return aPrice - bPrice;
                });
                break;
            case 'price-desc':
                rows.sort((a, b) => {
                    const aPrice = parseFloat(a.cells[6].getAttribute('data-sort'));
                    const bPrice = parseFloat(b.cells[6].getAttribute('data-sort'));
                    return bPrice - aPrice;
                });
                break;
            case 'participants-asc':
                rows.sort((a, b) => {
                    const aPart = parseInt(a.cells[5].getAttribute('data-sort'));
                    const bPart = parseInt(b.cells[5].getAttribute('data-sort'));
                    return aPart - bPart;
                });
                break;
            case 'participants-desc':
                rows.sort((a, b) => {
                    const aPart = parseInt(a.cells[5].getAttribute('data-sort'));
                    const bPart = parseInt(b.cells[5].getAttribute('data-sort'));
                    return bPart - aPart;
                });
                break;
            case 'default':
                rows.sort((a, b) => {
                    return originalOrder.findIndex(row => row.isEqualNode(a)) - 
                           originalOrder.findIndex(row => row.isEqualNode(b));
                });
                break;
        }

        // Clear and re-append rows
        tbody.innerHTML = '';
        rows.forEach(row => tbody.appendChild(row));
    }
});
</script>
{% endblock %}