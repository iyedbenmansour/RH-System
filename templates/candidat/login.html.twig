{% extends 'base.html.twig' %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .face-auth-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(0,0,0,0.8);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }
        .face-auth-modal.active {
            display: flex !important;
        }
        .face-auth-container {
            background: white;
            padding: 2rem;
            border-radius: 8px;
            max-width: 500px;
            width: 95vw;
            box-shadow: 0 6px 32px rgba(0,0,0,0.18);
        }
        #camera-view {
            width: 100%;
            max-height: 300px;
            border: 1px solid #ccc;
            margin-bottom: 1rem;
            aspect-ratio: 4 / 3;
            background: #000;
        }
        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(255, 255, 255, 0.7);
            z-index: 2000;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }
        .loading-overlay.active {
            display: flex !important;
        }
        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #ccc;
            border-top: 5px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
{% endblock %}

{% block body %}
<div class="container">
    <div class="login-container">
        <h2 class="text-center mb-4">Login</h2>
        <form id="loginForm" method="post" action="{{ path('candidat_login') }}">
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" class="form-control" id="email" name="email" required autocomplete="username">
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" name="password" required autocomplete="current-password">
            </div>
            <button type="submit" class="btn btn-primary btn-block">Login</button>
        </form>
    </div>
</div>

<!-- Face Verification Modal -->
<div class="face-auth-modal" id="faceAuthModal" tabindex="-1" aria-modal="true" role="dialog">
    <div class="face-auth-container">
        <h3 class="text-center mb-3">Verify Your Identity</h3>
        <p class="text-center mb-3">Please look at the camera to verify your identity</p>
        <video id="camera-view" autoplay playsinline></video>
        <canvas id="canvas" style="display:none;"></canvas>
        <div class="text-center">
            <button id="capture-btn" class="btn btn-secondary mb-2">Capture Face</button><br>
            <button id="verify-btn" class="btn btn-primary" disabled>Verify</button>
            <button id="cancel-btn" class="btn btn-danger ml-2">Cancel</button>
        </div>
    </div>
</div>

<!-- Loading overlay -->
<div class="loading-overlay" id="loading-overlay">
    <div class="spinner"></div>
    <p class="mt-2">Authenticating...</p>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const loginForm = document.getElementById('loginForm');
    const faceAuthModal = document.getElementById('faceAuthModal');
    const video = document.getElementById('camera-view');
    const captureBtn = document.getElementById('capture-btn');
    const canvas = document.getElementById('canvas');
    const verifyBtn = document.getElementById('verify-btn');
    const cancelBtn = document.getElementById('cancel-btn');
    const loadingOverlay = document.getElementById('loading-overlay');

    let capturedImage = null;
    let stream = null;

    // Show loading overlay
    function showLoading() {
        loadingOverlay.classList.add('active');
    }
    function hideLoading() {
        loadingOverlay.classList.remove('active');
    }

    // Show and activate modal, start camera
    async function showFaceModal() {
        faceAuthModal.classList.add('active');
        try {
            stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
            video.srcObject = stream;
            video.play();
            setTimeout(() => {
                captureBtn.focus();
            }, 200);
        } catch (err) {
            faceAuthModal.classList.remove('active');
            alert("Camera access denied or not available.");
        }
        verifyBtn.disabled = true;
        capturedImage = null;
    }

    // Hide modal, stop camera
    function hideFaceModal() {
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
        }
        video.srcObject = null;
        faceAuthModal.classList.remove('active');
        capturedImage = null;
    }

    captureBtn.addEventListener('click', function () {
        if (!video.srcObject) {
            alert("Camera not started.");
            return;
        }
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        capturedImage = canvas.toDataURL('image/jpeg');
        verifyBtn.disabled = false;
    });

    verifyBtn.addEventListener('click', async function () {
        if (!capturedImage) return;
        showLoading();
        try {
            const response = await fetch('{{ path('candidat_face_verify') }}', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: 'image_data=' + encodeURIComponent(capturedImage)
            });
            const data = await response.json();
            if (data.success) {
                if (data.candidat_id) localStorage.setItem('candidat_id', data.candidat_id);
                if (data.candidat_name) localStorage.setItem('candidat_name', data.candidat_name);
                if (data.employee_id) localStorage.setItem('employee_id', data.employee_id);
                window.location.href = data.redirect;
            } else {
                alert('Verification failed: ' + (data.error || 'Unknown error'));
                capturedImage = null;
                verifyBtn.disabled = true;
            }
        } catch (error) {
            alert('Verification error');
            console.error(error);
        } finally {
            hideLoading();
        }
    });

    cancelBtn.addEventListener('click', function () {
        hideFaceModal();
    });

    // Trap ESC and close modal if needed
    document.addEventListener('keydown', function (e) {
        if (faceAuthModal.classList.contains('active') && e.key === 'Escape') {
            hideFaceModal();
        }
    });

    loginForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        showLoading();
        try {
            const formData = new FormData(loginForm);
            const response = await fetch(loginForm.action, {
                method: 'POST',
                body: formData
            });
            const data = await response.json();

            if (data.success) {
                if (data.has_face) {
                    // Immediately open modal and force verification
                    hideLoading();
                    await showFaceModal();
                } else {
                    // Normal login: Save to localStorage and redirect
                    if (data.candidat_id) localStorage.setItem('candidat_id', data.candidat_id);
                    if (data.candidat_name) localStorage.setItem('candidat_name', data.candidat_name);
                    if (data.employee_id) localStorage.setItem('employee_id', data.employee_id);
                    window.location.href = data.redirect;
                }
            } else {
                alert('Login failed: ' + (data.error || 'Invalid credentials'));
            }
        } catch (error) {
            alert('Login error');
            console.error(error);
        } finally {
            hideLoading();
        }
    });

    // Clean up camera stream on page exit
    window.addEventListener('beforeunload', function () {
        if (stream) {
            stream.getTracks().forEach(track => track.stop());
        }
    });
});
</script>
{% endblock %}