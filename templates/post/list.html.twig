{% extends 'base.html.twig' %}

{% block title %}All Posts{% endblock %}

{% block body %}
<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>All Posts</h1>
        <a href="{{ path('app_post_create') }}" class="btn btn-primary">
            Create New Post
        </a>
    </div>
    
    {% for postWithReplies in postsWithReplies %}
    {% set post = postWithReplies.post %}
    {% set replies = postWithReplies.replies %}
    
    <div id="post-{{ post.id }}" class="card mb-4">
        <div class="card-body">
            <div class="d-flex justify-content-between mb-2">
                <small class="text-muted">Posted by User #{{ post.userId }}</small>
                <small class="text-muted">{{ post.createdAt|date('Y-m-d H:i') }}</small>
            </div>
            
            <p class="card-text">{{ post.content }}</p>
            
            {% if post.imagePath %}
            <div class="mt-3">
                <img src="{{ asset('uploads/' ~ post.imagePath) }}" class="img-fluid rounded" alt="Post image">
            </div>
            {% endif %}
            
            {% if post.pdfPath %}
            <div class="mt-3">
                <a href="{{ asset('uploads/' ~ post.pdfPath) }}" class="btn btn-sm btn-outline-secondary" target="_blank">
                    View PDF Attachment
                </a>
            </div>
            {% endif %}
            
            <div class="d-flex justify-content-start mt-3">
                <button class="btn btn-sm btn-outline-success me-2 like-button" data-post-id="{{ post.id }}">
                    Like (<span class="like-count">{{ post.likeCount }}</span>)
                </button>
                <button class="btn btn-sm btn-outline-danger dislike-button" data-post-id="{{ post.id }}">
                    Dislike (<span class="dislike-count">{{ post.dislikeCount }}</span>)
                </button>
            </div>

            <!-- Replies Section -->
            <div class="mt-4 border-top pt-3">
                <h6>Replies ({{ replies|length }})</h6>
                
                {% if replies|length > 0 %}
                    {% for reply in replies %}
                    <div class="card mb-2">
                        <div class="card-body p-3">
                            <div class="d-flex justify-content-between small text-muted mb-1">
                                <span>User #{{ reply.userId }}</span>
                                <!-- Removed datetime display -->
                            </div>
                            <p class="mb-0">{{ reply.content }}</p>
                        </div>
                    </div>
                    {% endfor %}
                {% else %}
                    <p class="text-muted">No replies yet.</p>
                {% endif %}
                
                <!-- Reply Form -->
                <form method="post" action="{{ path('app_reply_create', {'postId': post.id}) }}" class="mt-3">
                    <div class="input-group mb-3">
                        <input type="text" 
                               name="content" 
                               class="form-control" 
                               placeholder="Write a reply..." 
                               required>
                        <button class="btn btn-primary" type="submit">Post Reply</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    {% else %}
    <div class="alert alert-info">No posts found.</div>
    {% endfor %}
</div>

{% block javascripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Like button event handlers
    document.querySelectorAll('.like-button').forEach(button => {
        button.addEventListener('click', function() {
            const postId = this.getAttribute('data-post-id');
            likePost(postId, this);
        });
    });
    
    // Dislike button event handlers
    document.querySelectorAll('.dislike-button').forEach(button => {
        button.addEventListener('click', function() {
            const postId = this.getAttribute('data-post-id');
            dislikePost(postId, this);
        });
    });
    
    // Function to handle like action
    function likePost(postId, button) {
        fetch(`/post/${postId}/like`, {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update the like count in the UI
                const likeCountElement = button.querySelector('.like-count');
                likeCountElement.textContent = data.likeCount;
                
                // Visual feedback
                button.classList.add('active');
                setTimeout(() => {
                    button.classList.remove('active');
                }, 500);
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }
    
    // Function to handle dislike action
    function dislikePost(postId, button) {
        fetch(`/post/${postId}/dislike`, {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update the dislike count in the UI
                const dislikeCountElement = button.querySelector('.dislike-count');
                dislikeCountElement.textContent = data.dislikeCount;
                
                // Visual feedback
                button.classList.add('active');
                setTimeout(() => {
                    button.classList.remove('active');
                }, 500);
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }
});
</script>
{% endblock %}
{% endblock %}