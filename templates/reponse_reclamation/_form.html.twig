{% block stylesheets %}
<style>
    .custom-file {
        position: relative;
        display: inline-block;
        width: 100%;
        margin-bottom: 0.5rem;
    }

    .custom-file-input {
        position: relative;
        z-index: 2;
        width: 100%;
        height: calc(1.5em + 0.75rem + 2px);
        margin: 0;
        opacity: 0;
    }

    .custom-file-label {
        position: absolute;
        top: 0;
        right: 0;
        left: 0;
        z-index: 1;
        height: calc(1.5em + 0.75rem + 2px);
        padding: 0.375rem 0.75rem;
        font-weight: 400;
        line-height: 1.5;
        color: #6c757d;
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
    }

    .custom-file-label::after {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        z-index: 3;
        display: block;
        height: calc(1.5em + 0.75rem);
        padding: 0.375rem 0.75rem;
        line-height: 1.5;
        color: #495057;
        content: "Parcourir";
        background-color: #e9ecef;
        border-left: inherit;
        border-radius: 0 0.25rem 0.25rem 0;
    }
</style>
{% endblock %}

{{ form_start(form, {'attr': {'enctype': 'multipart/form-data', 'novalidate': 'novalidate', 'class': 'needs-validation', 'id': 'response-form'}}) }}
    <div class="mb-3">
        {{ form_label(form.reclamation, null, {'label_attr': {'class': 'form-label'}}) }}
        {{ form_widget(form.reclamation, {'attr': {'class': 'form-control select2' ~ (form.reclamation.vars.errors|length ? ' is-invalid' : '')}}) }}
        {% if form.reclamation.vars.errors|length %}
            <div class="invalid-feedback d-block">
                {{ form_errors(form.reclamation) }}
            </div>
        {% endif %}
    </div>

    <div class="mb-3">
        {{ form_label(form.idUser, null, {'label_attr': {'class': 'form-label'}}) }}
        {{ form_widget(form.idUser, {'attr': {'class': 'form-control' ~ (form.idUser.vars.errors|length ? ' is-invalid' : '')}}) }}
        {% if form.idUser.vars.errors|length %}
            <div class="invalid-feedback d-block">
                {{ form_errors(form.idUser) }}
            </div>
        {% endif %}
    </div>

    <div class="mb-3">
        {{ form_label(form.idReceiver, null, {'label_attr': {'class': 'form-label'}}) }}
        {{ form_widget(form.idReceiver, {'attr': {'class': 'form-control' ~ (form.idReceiver.vars.errors|length ? ' is-invalid' : '')}}) }}
        {% if form.idReceiver.vars.errors|length %}
            <div class="invalid-feedback d-block">
                {{ form_errors(form.idReceiver) }}
            </div>
        {% endif %}
    </div>

    <div class="mb-3">
        {{ form_label(form.reponse, null, {'label_attr': {'class': 'form-label'}}) }}
        {{ form_widget(form.reponse, {'attr': {'class': 'form-control' ~ (form.reponse.vars.errors|length ? ' is-invalid' : ''), 'rows': 5}}) }}
        {% if form.reponse.vars.errors|length %}
            <div class="invalid-feedback d-block">
                {{ form_errors(form.reponse) }}
            </div>
        {% endif %}
    </div>
    
    <div class="mb-3">
        {{ form_label(form.pdfFile, null, {'label_attr': {'class': 'form-label'}}) }}
        {{ form_widget(form.pdfFile, {'attr': {'class': 'form-control' ~ (form.pdfFile.vars.errors|length ? ' is-invalid' : '')}}) }}
        <div class="form-text">{{ form_help(form.pdfFile) }}</div>
        {% if form.pdfFile.vars.errors|length %}
            <div class="invalid-feedback d-block">
                {{ form_errors(form.pdfFile) }}
            </div>
        {% endif %}
        {% if form.vars.value.pdfPath %}
            <div class="mt-2">
                <small>PDF actuel: <a href="{{ asset('uploads/reponse/pdfs/' ~ form.vars.value.pdfPath) }}" target="_blank">Voir le PDF</a></small>
            </div>
        {% endif %}
    </div>
    
    <div class="mb-3">
        {{ form_label(form.statueOfReponseReclamation, null, {'label_attr': {'class': 'form-label'}}) }}
        {{ form_widget(form.statueOfReponseReclamation, {'attr': {'class': 'form-select' ~ (form.statueOfReponseReclamation.vars.errors|length ? ' is-invalid' : '')}}) }}
        {% if form.statueOfReponseReclamation.vars.errors|length %}
            <div class="invalid-feedback d-block">
                {{ form_errors(form.statueOfReponseReclamation) }}
            </div>
        {% endif %}
    </div>
    
    <div class="mb-3">
        {{ form_label(form.date, null, {'label_attr': {'class': 'form-label'}}) }}
        {{ form_widget(form.date, {'attr': {'class': 'form-control' ~ (form.date.vars.errors|length ? ' is-invalid' : '')}}) }}
        {% if form.date.vars.errors|length %}
            <div class="invalid-feedback d-block">
                {{ form_errors(form.date) }}
            </div>
        {% endif %}
    </div>
    
    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
        <a href="{{ path('app_reponse_reclamation_index') }}" class="btn btn-secondary me-md-2">
            <i class="fa fa-arrow-left me-1"></i> Back to list
        </a>
        <button type="submit" class="btn btn-primary" formnovalidate>
            <i class="fa fa-save me-1"></i> {{ button_label|default('Save') }}
        </button>
    </div>
{{ form_end(form) }}

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Gestion de l'affichage du nom de fichier
    const fileInput = document.querySelector('.custom-file-input');
    const fileLabel = document.querySelector('.input-group-text');
    const originalLabel = fileLabel.innerHTML;

    fileInput.addEventListener('change', function(e) {
        const fileName = e.target.files[0] ? e.target.files[0].name : 'Aucun fichier choisi';
        const fileSize = e.target.files[0] ? e.target.files[0].size : 0;
        
        if (fileSize > 5 * 1024 * 1024) { // 5MB
            alert('Le fichier est trop volumineux. La taille maximale est de 5 MB.');
            this.value = '';
            fileLabel.innerHTML = originalLabel;
            return;
        }

        if (e.target.files[0] && !e.target.files[0].type.match('application/pdf')) {
            alert('Seuls les fichiers PDF sont acceptés.');
            this.value = '';
            fileLabel.innerHTML = originalLabel;
            return;
        }

        // Mettre à jour le label avec une icône et le nom du fichier
        fileLabel.innerHTML = `<i class="fas fa-file-pdf"></i> ${fileName.length > 20 ? fileName.substring(0, 17) + '...' : fileName}`;
    });

    // Gestion de la suppression du fichier existant
    const removeFileBtn = document.querySelector('.remove-file');
    if (removeFileBtn) {
        removeFileBtn.addEventListener('click', function(e) {
            e.preventDefault();
            const currentFileDiv = this.closest('.current-file');
            if (currentFileDiv) {
                currentFileDiv.remove();
                // Réinitialiser l'input file
                fileInput.value = '';
                fileLabel.innerHTML = originalLabel;
            }
        });
    }

    // Animation des labels au focus
    const formControls = document.querySelectorAll('.form-control');
    formControls.forEach(control => {
        control.addEventListener('focus', function() {
            this.closest('.form-group').classList.add('focused');
        });
        
        control.addEventListener('blur', function() {
            if (!this.value) {
                this.closest('.form-group').classList.remove('focused');
            }
        });

        // Initialiser l'état focused si le champ a une valeur
        if (control.value) {
            control.closest('.form-group').classList.add('focused');
        }
    });
});
</script>

<style>
.custom-file-container {
    position: relative;
}

.input-group {
    display: flex;
    align-items: stretch;
}

.input-group .form-control {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

.input-group-text {
    background: #4361ee;
    color: white;
    border: none;
    cursor: pointer;
    padding: 0.75rem 1.5rem;
    border-top-right-radius: 0.5rem;
    border-bottom-right-radius: 0.5rem;
    transition: all 0.3s ease;
}

.input-group-text:hover {
    background: #2d3748;
}

.current-file {
    background: #f8fafc;
    border-radius: 0.5rem;
    transition: all 0.3s ease;
}

.current-file:hover {
    background: #edf2f7;
}

.remove-file {
    opacity: 0.7;
    transition: all 0.3s ease;
}

.remove-file:hover {
    opacity: 1;
}

.form-text {
    font-size: 0.875rem;
    margin-top: 0.25rem;
}

.form-group.focused label {
    color: #4361ee;
    transform: translateY(-1.25rem) scale(0.85);
    transform-origin: left top;
}

.form-control.is-invalid {
    border-color: #dc3545;
    padding-right: calc(1.5em + 0.75rem);
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-position: right calc(0.375em + 0.1875rem) center;
    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
}

.invalid-feedback {
    display: block;
    width: 100%;
    margin-top: 0.25rem;
    font-size: 0.875em;
    color: #dc3545;
}
</style>
